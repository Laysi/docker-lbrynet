- name: Get latest release version
  on:
  schedule:
    - cron:  '0 0 * * *'
  jobs:
  get-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GHCR_TOKEN }}
      - name: Fetch release version
        run: |
          curl -sL https://api.github.com/repos/lbryio/lbry-sdk/releases/latest | \
          jq -r ".tag_name" > version
      - name: Check for modified files
        id: git-check
        run: echo ::set-output name=modified::$([ -z "`git status --porcelain`" ] && echo "false" || echo "true")
      - name: Commit latest release version
        if: steps.git-check.outputs.modified == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -am | cat version
          git push

- name: build image
  on:
    push:
      paths:
        - 'version'
    jobs:
      Build:
        runs-on: ubuntu-latest
        steps:
          - name: Get version
            id: getVersion
            run:
              VERSION= `cat version`
              echo "::tag::$VERSION"
          - name: Download lbrynet
            run: |
              wget lbrynet.zip https://github.com/lbryio/lbry-sdk/releases/download/${{ steps.getVersion.outputs.tag }}/lbrynet-linux.zip
          - name: Unzip 
            uses: montudor/action-zip@v0.1.1
            with:
              args: unzip lbrynet-linux.zip
          - name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v1
          - name: Login to Github Package
            uses: docker/login-action@v1
            with:
              registry: ghcr.io
              username: ${{ github.repository_owner }}
              password: ${{ secrets.GHCR_TOKEN }}
          - name: Build and Push container image
            uses: docker/build-push-action@v2
            with:
              push: ${{ github.event_name != 'pull_request' }}
              tags: ${{ steps.getVersion.outputs.tag }}
              labels: |
                org.opencontainers.image.source=${{ github.event.repository.clone_url }}
                org.opencontainers.image.revision=${{ steps.getVersion.outputs.tag }}